import TelegramBot from 'node-telegram-bot-api';
import { storage } from '../storage';
import type { TradingSignal } from '@shared/schema';

export class TelegramService {
  private bot: TelegramBot;
  private isConnected = false;
  private chatId: string;

  constructor() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    this.chatId = process.env.TELEGRAM_CHAT_ID || '';
    
    if (!token) {
      throw new Error('Telegram bot token not provided');
    }

    this.bot = new TelegramBot(token, { polling: true });
    this.initialize();
  }

  private async initialize() {
    try {
      this.bot.on('message', (msg) => {
        console.log('Telegram message received:', msg);
      });

      this.bot.on('polling_error', (error) => {
        console.error('Telegram polling error:', error);
        this.isConnected = false;
        this.updateBotStatus('error');
        this.logSystemEvent('ERROR', `Telegram polling error: ${error.message}`);
      });

      // Test connection
      const me = await this.bot.getMe();
      console.log('Telegram bot connected:', me.username);
      this.isConnected = true;
      this.updateBotStatus('active');
      this.logSystemEvent('INFO', `Telegram bot connected as @${me.username}`);
    } catch (error) {
      console.error('Error initializing Telegram service:', error);
      this.isConnected = false;
      this.updateBotStatus('error');
      this.logSystemEvent('ERROR', `Failed to initialize Telegram service: ${error}`);
    }
  }

  async sendTradingSignal(signal: TradingSignal): Promise<boolean> {
    if (!this.isConnected || !this.chatId) {
      return false;
    }

    try {
      const message = this.formatSignalMessage(signal);
      
      await this.bot.sendMessage(this.chatId, message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      });

      await storage.createSignalTransmission({
        signalId: signal.id,
        destination: 'telegram',
        destinationId: this.chatId,
        status: 'sent',
        response: 'Signal sent successfully',
      });

      this.logSystemEvent('INFO', `Trading signal sent to Telegram for ${signal.symbol}`);
      return true;
    } catch (error) {
      console.error('Error sending Telegram signal:', error);
      
      await storage.createSignalTransmission({
        signalId: signal.id,
        destination: 'telegram',
        destinationId: this.chatId,
        status: 'failed',
        response: error instanceof Error ? error.message : 'Unknown error',
      });

      this.logSystemEvent('ERROR', `Failed to send Telegram signal: ${error}`);
      return false;
    }
  }

  private formatSignalMessage(signal: TradingSignal): string {
    const emoji = signal.signal === 'BUY' ? 'üü¢' : 
                  signal.signal === 'SELL' ? 'üî¥' : 'üü°';
    
    let message = `${emoji} <b>Trading Signal</b>\n\n`;
    message += `üìä <b>Symbol:</b> ${signal.symbol}\n`;
    message += `üìà <b>Signal:</b> ${signal.signal}\n`;
    message += `üéØ <b>Confidence:</b> ${(signal.confidence * 100).toFixed(1)}%\n`;
    message += `üí∞ <b>Entry Price:</b> $${signal.entryPrice.toFixed(4)}\n`;
    
    if (signal.targetPrice) {
      message += `üéØ <b>Target:</b> $${signal.targetPrice.toFixed(4)}\n`;
    }
    
    if (signal.stopLoss) {
      message += `üõë <b>Stop Loss:</b> $${signal.stopLoss.toFixed(4)}\n`;
    }
    
    if (signal.aiReasoning) {
      message += `\nüí° <b>AI Analysis:</b>\n${signal.aiReasoning}\n`;
    }
    
    message += `\n‚è∞ <b>Time:</b> ${signal.createdAt.toLocaleString()}`;
    message += `\n\nü§ñ <i>Generated by Bybit Trading Bot</i>`;
    
    return message;
  }

  private async updateBotStatus(status: string) {
    try {
      await storage.updateBotStatus({
        botName: 'telegram',
        status,
        metadata: { 
          chatId: this.chatId,
          connected: this.isConnected,
        },
      });
    } catch (error) {
      console.error('Error updating Telegram bot status:', error);
    }
  }

  private async logSystemEvent(level: string, message: string) {
    try {
      await storage.createSystemLog({
        level,
        message,
        service: 'telegram',
        metadata: null,
      });
    } catch (error) {
      console.error('Error logging Telegram system event:', error);
    }
  }

  public isOnline(): boolean {
    return this.isConnected;
  }

  public async disconnect() {
    if (this.bot) {
      await this.bot.close();
      this.isConnected = false;
      this.updateBotStatus('inactive');
    }
  }
}

export const telegramService = new TelegramService();
